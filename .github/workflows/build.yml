name: Build

on: push

jobs:
  build_api:
    name: API install, lint & build
    runs-on: ubuntu-latest
    container: rust:slim
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache lambda cargo crates
        uses: actions/cache@v2
        env:
          cache-name: cache-api-cargo-crates
        with:
          path: api_lambda/target
          key: ${{ runner.os }}-${{ hashFiles('api_lambda/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-
      - name: Add project deps
        run: apt update && apt install -y make && make ci_install
      - name: Lint
        run: t=api_lambda make clippy
      - name: Build
        run: t=api_lambda make build
      - name: Store
        uses: actions/upload-artifact@v2
        with:
          name: api-binary
          path: api_lambda/release/bootstrap
  build_broadcast:
    name: Broadcast install, lint & build
    runs-on: ubuntu-latest
    container: rust:slim
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache lambda cargo crates
        uses: actions/cache@v2
        env:
          cache-name: cache-broadcast-cargo-crates
        with:
          path: broadcast_lambda/target
          key: ${{ runner.os }}-${{ hashFiles('broadcast_lambda/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-
      - name: Add project deps
        run: apt update && apt install -y make && make ci_install
      - name: Lint
        run: t=broadcast_lambda make clippy
      - name: Build
        run: t=broadcast_lambda make build
      - name: Store
        uses: actions/upload-artifact@v2
        with:
          name: broadcast-binary
          path: broadcast_lambda/release/bootstrap
  deploy:
    name: Deploy terraform
    runs-on: ubuntu-latest
    needs: [build_api, build_broadcast]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
      - name: Load API build
        uses: actions/download-artifact@v2
        with:
          name: api-binary
          path: api_lambda/release
      - name: Make API binary executable
        working-directory: ./api_lambda/release
        run: chmod +x bootstrap
      - name: Load broadcast build
        uses: actions/download-artifact@v2
        with:
          name: broadcast-binary
          path: broadcast_lambda/release
      - name: Make broadcast binary executable
        working-directory: ./broadcast_lambda/release
        run: chmod +x bootstrap
      - name: Init terraform
        working-directory: ./terraform/main
        run: terraform init -backend-config "key=janky-werewolf/terraform/${GITHUB_REF##*/}/key"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Apply terraform
        working-directory: ./terraform/main
        run: terraform apply -auto-approve -var="environment=${GITHUB_REF##*/}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
